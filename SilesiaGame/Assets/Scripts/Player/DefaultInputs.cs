//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/DefaultInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefaultInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefaultInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DefaultInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f11ff463-ef8e-4de0-b4f4-88b4b8946bf8"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""629d3048-5aa5-4810-85eb-3996fe3953da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6376303b-5fa7-42f6-b35b-707da684bf74"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShowHint"",
                    ""type"": ""Button"",
                    ""id"": ""387b5fbc-57a5-41b1-9672-505c7e81d1a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""a41d6b9b-36d0-431b-a910-17deacddfb78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3041a4a1-537e-4471-b3e0-683eab977a05"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse X"",
                    ""type"": ""PassThrough"",
                    ""id"": ""46b19d91-d75e-423d-95ef-b82f8e622ca5"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Y"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e9d68856-ff20-4662-a5d3-6d2eefad108c"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9048ef6-902a-4779-bb87-dc6fa5ae3191"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""112e431a-d7fe-4d07-8e5b-5e4903137e3d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""fb6d1267-d516-4966-a3be-60617c7e3a38"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4dd0fb93-0759-40f2-ad0a-798348168482"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aa56fca5-4fd0-4dfb-b41d-fad0ecbcca68"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5cd80093-3269-4739-95f0-6c38d3e12acd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""962b1782-cc62-4ac2-8332-88bd30d548a7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left Stick"",
                    ""id"": ""b89197c6-daee-4dd4-8dd2-912f7b2ef7f5"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""badced41-8ae4-49ce-8c7d-bf00a4a1d169"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""31e46259-5b71-48f9-8abe-732e19c78b9e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""85cdc3cb-f6d7-44a3-9f0c-027a6a30874c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c8bad870-b01f-4291-be70-efd8ce42b88f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bfdfa082-bcb2-47e4-9714-ae8610cc81da"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowHint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""246cb5bc-0fea-4044-a812-a7a171f8e354"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1de44e08-6281-4026-9eb9-37b32c5de54a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc06b525-3338-4605-8a46-9b5192fc4385"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7186ebca-f11d-48eb-8139-e24c1ce92d71"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Delta/X [Mouse]"",
                    ""id"": ""ba2d2ba5-0556-41f7-bf42-a40068231087"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c869c158-0ebd-47cc-9525-4fa824afafef"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""070860b7-f51f-49d1-87b1-515482192947"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Delta/Y [Mouse]"",
                    ""id"": ""3341dfb1-0c76-4584-9a1b-72b05ade8234"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fa3d59f8-2d0d-4a69-838e-4c2df9752375"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f2cef282-d614-4402-ae46-5857ffb4886a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fa8dd6d7-520a-48c4-9b29-197c6e082aa7"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84739e80-5775-434d-b7a6-2e0057f9a499"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""a4ec2e89-2d8f-44d5-bc52-b5808195a60f"",
            ""actions"": [
                {
                    ""name"": ""NextLine"",
                    ""type"": ""Button"",
                    ""id"": ""b5788e7c-07f4-40ad-9d7c-f95c01e8c254"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0c974475-fa2f-4bff-937a-48676cae9305"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8fccb3c8-7f3e-44c9-b08e-0bd6377d3061"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Journal"",
            ""id"": ""17697988-2e5f-42f4-a45f-e03be69612b5"",
            ""actions"": [
                {
                    ""name"": ""JournalPreviousPage"",
                    ""type"": ""Button"",
                    ""id"": ""8e36269d-f6fe-4205-9760-01cf559a0f09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JournalNextPage"",
                    ""type"": ""Button"",
                    ""id"": ""7fc22395-8696-4bae-aba2-ca6abc9b3efd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuitJournal"",
                    ""type"": ""Button"",
                    ""id"": ""476043a1-d8bf-4fc8-b7df-b7d5a3b73138"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseWithESC"",
                    ""type"": ""Button"",
                    ""id"": ""6509d0cb-440c-463f-b21d-c08149c1ab3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a522c106-d435-4610-8835-4e03672d4abc"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JournalNextPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""25f1f46f-0286-40a9-a3ad-cb38d8093304"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JournalNextPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82b1a49f-2a4e-4dee-9fc4-93765865fbc6"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JournalPreviousPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""825d129d-5915-417e-ae60-1f587c67abd0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JournalPreviousPage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ccc69bc-a7fa-4d8d-82f2-86772336080f"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuitJournal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a44df7c-eaf2-4561-b57e-eb938c2d4812"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QuitJournal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3851d6eb-416f-4c13-9549-c4d5e8657f51"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseWithESC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dbb4092-7762-485a-a519-2186be90a8c6"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseWithESC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""add615e4-4bab-43e9-ba71-eebe6379d154"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseWithESC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Zoom"",
            ""id"": ""3545efe5-68bb-4812-945b-1be8145b2208"",
            ""actions"": [
                {
                    ""name"": ""Zoom In"",
                    ""type"": ""Button"",
                    ""id"": ""e0ee4412-a52d-42d4-b15e-1ee7e60d3e38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ab30b1e4-0e5a-457f-aa66-0667a87c590a"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom In"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0924332-cdab-47d1-a616-b78e8b6fc592"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom In"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_ShowHint = m_Player.FindAction("ShowHint", throwIfNotFound: true);
        m_Player_PauseMenu = m_Player.FindAction("PauseMenu", throwIfNotFound: true);
        m_Player_Mouse = m_Player.FindAction("Mouse", throwIfNotFound: true);
        m_Player_MouseX = m_Player.FindAction("Mouse X", throwIfNotFound: true);
        m_Player_MouseY = m_Player.FindAction("Mouse Y", throwIfNotFound: true);
        // Dialogue
        m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
        m_Dialogue_NextLine = m_Dialogue.FindAction("NextLine", throwIfNotFound: true);
        // Journal
        m_Journal = asset.FindActionMap("Journal", throwIfNotFound: true);
        m_Journal_JournalPreviousPage = m_Journal.FindAction("JournalPreviousPage", throwIfNotFound: true);
        m_Journal_JournalNextPage = m_Journal.FindAction("JournalNextPage", throwIfNotFound: true);
        m_Journal_QuitJournal = m_Journal.FindAction("QuitJournal", throwIfNotFound: true);
        m_Journal_CloseWithESC = m_Journal.FindAction("CloseWithESC", throwIfNotFound: true);
        // Zoom
        m_Zoom = asset.FindActionMap("Zoom", throwIfNotFound: true);
        m_Zoom_ZoomIn = m_Zoom.FindAction("Zoom In", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_ShowHint;
    private readonly InputAction m_Player_PauseMenu;
    private readonly InputAction m_Player_Mouse;
    private readonly InputAction m_Player_MouseX;
    private readonly InputAction m_Player_MouseY;
    public struct PlayerActions
    {
        private @DefaultInputs m_Wrapper;
        public PlayerActions(@DefaultInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @ShowHint => m_Wrapper.m_Player_ShowHint;
        public InputAction @PauseMenu => m_Wrapper.m_Player_PauseMenu;
        public InputAction @Mouse => m_Wrapper.m_Player_Mouse;
        public InputAction @MouseX => m_Wrapper.m_Player_MouseX;
        public InputAction @MouseY => m_Wrapper.m_Player_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @ShowHint.started += instance.OnShowHint;
            @ShowHint.performed += instance.OnShowHint;
            @ShowHint.canceled += instance.OnShowHint;
            @PauseMenu.started += instance.OnPauseMenu;
            @PauseMenu.performed += instance.OnPauseMenu;
            @PauseMenu.canceled += instance.OnPauseMenu;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
            @MouseY.started += instance.OnMouseY;
            @MouseY.performed += instance.OnMouseY;
            @MouseY.canceled += instance.OnMouseY;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @ShowHint.started -= instance.OnShowHint;
            @ShowHint.performed -= instance.OnShowHint;
            @ShowHint.canceled -= instance.OnShowHint;
            @PauseMenu.started -= instance.OnPauseMenu;
            @PauseMenu.performed -= instance.OnPauseMenu;
            @PauseMenu.canceled -= instance.OnPauseMenu;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
            @MouseY.started -= instance.OnMouseY;
            @MouseY.performed -= instance.OnMouseY;
            @MouseY.canceled -= instance.OnMouseY;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Dialogue
    private readonly InputActionMap m_Dialogue;
    private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
    private readonly InputAction m_Dialogue_NextLine;
    public struct DialogueActions
    {
        private @DefaultInputs m_Wrapper;
        public DialogueActions(@DefaultInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @NextLine => m_Wrapper.m_Dialogue_NextLine;
        public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
            @NextLine.started += instance.OnNextLine;
            @NextLine.performed += instance.OnNextLine;
            @NextLine.canceled += instance.OnNextLine;
        }

        private void UnregisterCallbacks(IDialogueActions instance)
        {
            @NextLine.started -= instance.OnNextLine;
            @NextLine.performed -= instance.OnNextLine;
            @NextLine.canceled -= instance.OnNextLine;
        }

        public void RemoveCallbacks(IDialogueActions instance)
        {
            if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueActions @Dialogue => new DialogueActions(this);

    // Journal
    private readonly InputActionMap m_Journal;
    private List<IJournalActions> m_JournalActionsCallbackInterfaces = new List<IJournalActions>();
    private readonly InputAction m_Journal_JournalPreviousPage;
    private readonly InputAction m_Journal_JournalNextPage;
    private readonly InputAction m_Journal_QuitJournal;
    private readonly InputAction m_Journal_CloseWithESC;
    public struct JournalActions
    {
        private @DefaultInputs m_Wrapper;
        public JournalActions(@DefaultInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @JournalPreviousPage => m_Wrapper.m_Journal_JournalPreviousPage;
        public InputAction @JournalNextPage => m_Wrapper.m_Journal_JournalNextPage;
        public InputAction @QuitJournal => m_Wrapper.m_Journal_QuitJournal;
        public InputAction @CloseWithESC => m_Wrapper.m_Journal_CloseWithESC;
        public InputActionMap Get() { return m_Wrapper.m_Journal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JournalActions set) { return set.Get(); }
        public void AddCallbacks(IJournalActions instance)
        {
            if (instance == null || m_Wrapper.m_JournalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JournalActionsCallbackInterfaces.Add(instance);
            @JournalPreviousPage.started += instance.OnJournalPreviousPage;
            @JournalPreviousPage.performed += instance.OnJournalPreviousPage;
            @JournalPreviousPage.canceled += instance.OnJournalPreviousPage;
            @JournalNextPage.started += instance.OnJournalNextPage;
            @JournalNextPage.performed += instance.OnJournalNextPage;
            @JournalNextPage.canceled += instance.OnJournalNextPage;
            @QuitJournal.started += instance.OnQuitJournal;
            @QuitJournal.performed += instance.OnQuitJournal;
            @QuitJournal.canceled += instance.OnQuitJournal;
            @CloseWithESC.started += instance.OnCloseWithESC;
            @CloseWithESC.performed += instance.OnCloseWithESC;
            @CloseWithESC.canceled += instance.OnCloseWithESC;
        }

        private void UnregisterCallbacks(IJournalActions instance)
        {
            @JournalPreviousPage.started -= instance.OnJournalPreviousPage;
            @JournalPreviousPage.performed -= instance.OnJournalPreviousPage;
            @JournalPreviousPage.canceled -= instance.OnJournalPreviousPage;
            @JournalNextPage.started -= instance.OnJournalNextPage;
            @JournalNextPage.performed -= instance.OnJournalNextPage;
            @JournalNextPage.canceled -= instance.OnJournalNextPage;
            @QuitJournal.started -= instance.OnQuitJournal;
            @QuitJournal.performed -= instance.OnQuitJournal;
            @QuitJournal.canceled -= instance.OnQuitJournal;
            @CloseWithESC.started -= instance.OnCloseWithESC;
            @CloseWithESC.performed -= instance.OnCloseWithESC;
            @CloseWithESC.canceled -= instance.OnCloseWithESC;
        }

        public void RemoveCallbacks(IJournalActions instance)
        {
            if (m_Wrapper.m_JournalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJournalActions instance)
        {
            foreach (var item in m_Wrapper.m_JournalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JournalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JournalActions @Journal => new JournalActions(this);

    // Zoom
    private readonly InputActionMap m_Zoom;
    private List<IZoomActions> m_ZoomActionsCallbackInterfaces = new List<IZoomActions>();
    private readonly InputAction m_Zoom_ZoomIn;
    public struct ZoomActions
    {
        private @DefaultInputs m_Wrapper;
        public ZoomActions(@DefaultInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomIn => m_Wrapper.m_Zoom_ZoomIn;
        public InputActionMap Get() { return m_Wrapper.m_Zoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ZoomActions set) { return set.Get(); }
        public void AddCallbacks(IZoomActions instance)
        {
            if (instance == null || m_Wrapper.m_ZoomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ZoomActionsCallbackInterfaces.Add(instance);
            @ZoomIn.started += instance.OnZoomIn;
            @ZoomIn.performed += instance.OnZoomIn;
            @ZoomIn.canceled += instance.OnZoomIn;
        }

        private void UnregisterCallbacks(IZoomActions instance)
        {
            @ZoomIn.started -= instance.OnZoomIn;
            @ZoomIn.performed -= instance.OnZoomIn;
            @ZoomIn.canceled -= instance.OnZoomIn;
        }

        public void RemoveCallbacks(IZoomActions instance)
        {
            if (m_Wrapper.m_ZoomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IZoomActions instance)
        {
            foreach (var item in m_Wrapper.m_ZoomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ZoomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ZoomActions @Zoom => new ZoomActions(this);
    public interface IPlayerActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnShowHint(InputAction.CallbackContext context);
        void OnPauseMenu(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
    public interface IDialogueActions
    {
        void OnNextLine(InputAction.CallbackContext context);
    }
    public interface IJournalActions
    {
        void OnJournalPreviousPage(InputAction.CallbackContext context);
        void OnJournalNextPage(InputAction.CallbackContext context);
        void OnQuitJournal(InputAction.CallbackContext context);
        void OnCloseWithESC(InputAction.CallbackContext context);
    }
    public interface IZoomActions
    {
        void OnZoomIn(InputAction.CallbackContext context);
    }
}
